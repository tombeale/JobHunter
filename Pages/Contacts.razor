@page "/contacts"
@using JobHunter.Shared
@using JobHunter.Models
@using JobHunter.Application
@using BlueSite.Data
@using BlueSite.Data.Entities
@inject IJSRuntime JsRuntime
@inject BlueSiteContext _context
<SideBar MenuSet="contacts" />

<h1>Contacts&nbsp;<TitleIcons Title="contacts" IconWidth="24px" /></h1>

@if (contacts.Count < 1)
{
    <p>No contacts found</p>
}
else
{
    <table class="to-do" border="0" style="width: 100%">
        @for (int i = 0; i < contacts.Count; i++)
        {
            int index = i;
            Contact c = contacts[index];
        <tr class="item-list">
            <td>
                <a href="/contactedit/@c.ContactId">@c.FirstName&nbsp;@c.LastName</a>
            </td>
            <td>@c.Title</td>
            <td class="phones"><Phones Numbers="@c.Phones" PhoneTypes="@phoneTypes" /></td>
            <td><Email Address="@c.Email" /></td>
            <td><WebLink Url="@c.Website" /></td>
        </tr>
        }
    </table>
}

@foreach (var ct in contactList)
{
    <div>@ct.ContactTypeKey @ct.ContactTypeName</div>
}


@code {

    protected List<Contact> contacts;
    protected List<DDOption> phoneTypes;

    JobHuntRepository Repository;

    List<ContactType> contactList;

    async Task SetTitle(string title)
    {
        await JsRuntime.InvokeVoidAsync(identifier: "setTitle", title);
    }

    /* *******************************************************************
        Life-Cycle Events
    ******************************************************************* */

    protected override void OnInitialized()
    {
        Repository = new JobHuntRepository(_context);
        contacts = Repository.AllContacts;

    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        phoneTypes = Utilities.GetPhoneTypeLookup(Repository.GetPhoneTypes());

        contactList = Repository.GetContactTypes();

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await SetTitle("Contacts");
    }

}
