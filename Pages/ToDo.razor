@page "/actions"
@using JobHunter.Shared
@using JobHunter.Application
@using BlueSite.Data
@using BlueSite.Data.Entities
@using BlueSite.Components
@using BlueSite.Data.Interfaces
@using JobHunter.Models

@inject IJSRuntime JsRuntime
    <!-- inject ActionRepository Actions -->
@inject BlueSiteContext _context

<SideBar MenuSet="todolist" OnClickCallback="@HandleSidebarOption" />

<div class="d-inline-block" style="width:70%">
    <h1>Action Items <span class="normal">(@todos.Count(todo => !todo.IsDone) Active Items)</span></h1>
</div>
<div class="d-inline-block" style="width:28%; text-align: right;">
    <DropDown OptionSet="todolist" OnClickCallback="@HandleSetActionType" Data="@Options" Value="@ActionType" />
</div>
<table class="to-do" border="0" style="width: 100%">

    @for (int i = 0; i < todos.Count; i++)
    {
        int index = i;
        if (!todos[index].IsDone)
        {
            <tr class="todo-list">
                <td width="40"><img src="images/checkbox-0.png" @onclick="eventArgs => CheckedClicked(index, true)" style="width: 30px" /></td>
                <td><input type="text" class="form-control to-do" @onchange="eventArgs => CaptionChanged(index, eventArgs.Value.ToString())" value="@todos[index].Title" style="width: 100%" /></td>
            </tr>
        }
        else if (!hideDone)
        {
            <tr class="to-do">
                <td width="40"><img src="images/checkbox-1.png" @onclick="eventArgs => CheckedClicked(index, false)" style="width: 30px" /></td>
                <td><input type="text" class="form-control to-do todo-done" @onchange="eventArgs => CaptionChanged(index, eventArgs.Value.ToString())" value="@todos[index].Title" style="width: 100%" /></td>
                <td width="60px"><span class="link" @onclick="eventArgs => ItemHandler(index)">Edit_#@index</span></td>
            </tr>
        }
    }
    <tr class="to-do">
        <td width="40">&nbsp;</td>
        <td width="100%">
            <input type="text" class="form-control to-do"
                   @onkeypress="@(e => handleNewTodoKeypress(e))" placeholder="---" @bind="newTodo" @bind:event="oninput" />
        </td>
    </tr>
</table>
<BsDialog @ref="confirm" Title="Confirm Delete Done Items" Message="Yes, if you select continue, all the items marked as done will be removed (You can't get them back)"
        OnClickCallback="@HandleDialogSelection" 
        Buttons="Cancel:cancel:btn btn-sm btn-secondary bs-dialog,Do It:continue:btn btn-sm btn-primary bs-dialog"/>
@code {
    private IList<ActionItem> todos = new List<ActionItem>();
    private string newTodo;

    private string doneClass = "";
    private string ActionKey = "";
    private string ActionType = "todo";

    private ActionRepository Actions;

    private bool hideDone = false;

    private List<DDOption> Options;


    private IEnumerable<ActionItem> data;

    SideBar SideBar1 = new SideBar();

    BsDialog confirm;

    private void ItemHandler(int index)
    {
        var todo = todos[index];

    }

    private void CheckedClicked(int index, bool b)
    {
        var t = todos[index];
        if (t != null && t.Id != null)
        {
            t.IsDone = b;
            _context.SaveChanges();
        }
    }

    private void CaptionChanged(int index, string text)
    {
        var t = todos[index];
        if (t != null && t.Id != null)
        {
            t.Title = text;
            _context.SaveChanges();
        }
    }

    private void handleNewTodoKeypress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            AddTodo();
        }
    }


    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            _context.Add(new ActionItem { Title = newTodo, Type = ActionType });
            _context.SaveChanges();
            todos = getToDoList();
            newTodo = string.Empty;
        }
    }

    public void HandleSidebarOption(string key)
    {
        ActionKey = key;
        switch (key.ToLower())
        {
            case "toggledone":
                hideDone = !hideDone;
                break;
            case "deletedone":
                confirm.Show();
                break;
        }
        StateHasChanged();
    }

    public void HandleSetActionType(string key)
    {
        ActionType = key.ToLower();
        todos = getToDoList();
        newTodo = string.Empty;
        StateHasChanged();
    }


    public void HandleDialogSelection(string key)
    {
        switch (key)
        {
            case "continue":
                ConfirmDelete(key);
                confirm.Hide();
                break;
            case "cancel":
                confirm.Hide();
                break;
        }
    }



    public void ConfirmDelete(string key)
    {
        todos.Where(t => t.IsDone).ToList().ForEach(t => _context.Remove(t));
        _context.SaveChanges();
        todos = getToDoList();
        StateHasChanged();
        confirm.Hide();
    }

    protected override void OnInitialized()
    {
        Actions = new ActionRepository(_context);
        todos = getToDoList();

        Options = new List<DDOption>();
        var opts = Actions.Types;
        foreach (var o in opts)
        {
            Options.Add(new DDOption(o.Id, o.Name));
        }
    }

    List<ActionItem> getToDoList()
    {
        return Actions.All.Where(a => a.Type == ActionType).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await SetTitle("Actions");
    }

    async Task SetTitle(string title)
    {
        await JsRuntime.InvokeVoidAsync(identifier: "setTitle",
            title);
    }
}
