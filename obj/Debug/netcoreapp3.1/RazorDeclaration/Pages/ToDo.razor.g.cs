#pragma checksum "F:\Projects\Blazor\JobHunter2020\JobHunter\Pages\ToDo.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "841e64ffecda3e94e833b71cf8fc8c9526d8d86d"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace JobHunter.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "F:\Projects\Blazor\JobHunter2020\JobHunter\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\Projects\Blazor\JobHunter2020\JobHunter\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "F:\Projects\Blazor\JobHunter2020\JobHunter\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "F:\Projects\Blazor\JobHunter2020\JobHunter\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "F:\Projects\Blazor\JobHunter2020\JobHunter\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "F:\Projects\Blazor\JobHunter2020\JobHunter\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "F:\Projects\Blazor\JobHunter2020\JobHunter\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "F:\Projects\Blazor\JobHunter2020\JobHunter\_Imports.razor"
using JobHunter;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\Projects\Blazor\JobHunter2020\JobHunter\Pages\ToDo.razor"
using JobHunter.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "F:\Projects\Blazor\JobHunter2020\JobHunter\Pages\ToDo.razor"
using JobHunter.Application;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "F:\Projects\Blazor\JobHunter2020\JobHunter\Pages\ToDo.razor"
using BlueSite.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "F:\Projects\Blazor\JobHunter2020\JobHunter\Pages\ToDo.razor"
using BlueSite.Data.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "F:\Projects\Blazor\JobHunter2020\JobHunter\Pages\ToDo.razor"
using BlueSite.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "F:\Projects\Blazor\JobHunter2020\JobHunter\Pages\ToDo.razor"
using BlueSite.Data.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "F:\Projects\Blazor\JobHunter2020\JobHunter\Pages\ToDo.razor"
using JobHunter.Models;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/actions")]
    public partial class ToDo : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 54 "F:\Projects\Blazor\JobHunter2020\JobHunter\Pages\ToDo.razor"
       
    private IList<ActionItem> todos = new List<ActionItem>();
    private string newTodo;

    private string doneClass = "";
    private string ActionKey = "";
    private string ActionType = "todo";

    private ActionRepository Actions;

    private bool hideDone = false;

    private List<DDOption> Options;


    private IEnumerable<ActionItem> data;

    SideBar SideBar1 = new SideBar();

    BsDialog confirm;

    private void ItemHandler(int index)
    {
        var todo = todos[index];

    }

    private void CheckedClicked(int index, bool b)
    {
        var t = todos[index];
        if (t != null && t.Id != null)
        {
            t.IsDone = b;
            _context.SaveChanges();
        }
    }

    private void CaptionChanged(int index, string text)
    {
        var t = todos[index];
        if (t != null && t.Id != null)
        {
            t.Title = text;
            _context.SaveChanges();
        }
    }

    private void handleNewTodoKeypress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            AddTodo();
        }
    }


    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            _context.Add(new ActionItem { Title = newTodo, Type = ActionType });
            _context.SaveChanges();
            todos = getToDoList();
            newTodo = string.Empty;
        }
    }

    public void HandleSidebarOption(string key)
    {
        ActionKey = key;
        switch (key.ToLower())
        {
            case "toggledone":
                hideDone = !hideDone;
                break;
            case "deletedone":
                confirm.Show();
                break;
        }
        StateHasChanged();
    }

    public void HandleSetActionType(string key)
    {
        ActionType = key.ToLower();
        todos = getToDoList();
        newTodo = string.Empty;
        StateHasChanged();
    }


    public void HandleDialogSelection(string key)
    {
        switch (key)
        {
            case "continue":
                ConfirmDelete(key);
                confirm.Hide();
                break;
            case "cancel":
                confirm.Hide();
                break;
        }
    }



    public void ConfirmDelete(string key)
    {
        todos.Where(t => t.IsDone).ToList().ForEach(t => _context.Remove(t));
        _context.SaveChanges();
        todos = getToDoList();
        StateHasChanged();
        confirm.Hide();
    }

    protected override void OnInitialized()
    {
        Actions = new ActionRepository(_context);
        todos = getToDoList();

        Options = new List<DDOption>();
        var opts = Actions.Types;
        foreach (var o in opts)
        {
            Options.Add(new DDOption(o.Id, o.Name));
        }
    }

    List<ActionItem> getToDoList()
    {
        return Actions.All.Where(a => a.Type == ActionType).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await SetTitle("Actions");
    }

    async Task SetTitle(string title)
    {
        await JsRuntime.InvokeVoidAsync(identifier: "setTitle",
            title);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BlueSiteContext _context { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
    }
}
#pragma warning restore 1591
