@inject IJSRuntime JsRuntime
@using System.Diagnostics

@if (!String.IsNullOrEmpty(Url))
{
    switch (option)
    {
        case "icon":
            <span class="link">
                <img @onclick="(() => GoToWeblink(linkUrl))" src="images/icons/@Image-0.png" width="28" title="Open Website"
                     onmouseover="setIconImage(this, '@Image-1.png')"
                     onmouseout="setIconImage(this, '@Image-0.png')" />
            </span>
            break;
        default:
            <a href="@linkUrl" target="_new">@linkText</a>
            break;
    }


}
else
{
    @:&nbsp;
}

@code {
    [Parameter]
    public string Url { get; set; }

    [Parameter]
    public string option { get; set; } = "";

    string Image = "WWW";

    string[] link;
    string linkText;
    string linkUrl;

    protected async void GoToWeblink(string url)
    {
        try {
            await JsRuntime.InvokeVoidAsync("open", url, "_blank");

        }
        catch(Exception e)
        {
            Debug.WriteLine(e.ToString());
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Url != null)
        {
            link = Url.Split("://");
            if (link.Length > 1)
            {
                linkUrl = $"{link[0]}://{link[1]}";
                linkText = link[1];
            }
            else
            {
                linkUrl = $"http://{link[0]}";
                linkText = link[0];
            }

        }
    }

}
