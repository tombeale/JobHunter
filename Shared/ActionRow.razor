@using BlueSite.Data.Entities
@using JobHunter.Models
@using JobHunter.Application

<tr class="action-list">
    <td class="column-action-status">
        <div class="status-button" id="action-row-@Index"
             @onclick='eventArgs => OnChangeCallback.InvokeAsync($"{Index}|status")'
             style="width: 100px; background-color:@GetColorStyleFromStatus(Action.Status); ">&nbsp;@GetFriendlyStatusName(Action.Status)&nbsp;</div>
        </td>
        <td class="column-action-name">@Action.Title</td>
        <td class="column-action-type">@GetFriendlyTypeName(Action.Type)</td>
        <td class="column-action-date">@Action.StartDate</td>
        <td class="column-action-date">@Action.EndDate</td>
        <td style="width: 120px; padding: 0px 20px 0px 4px">
            <InlineToolBar Index="@Index"
                           MenuSet="@ToolBars.GetActionRowItems(HasNotes, Action.IsDone)" Action="@Action" OnChangeCallback="@OnRowOptionCallback" />
        </td>
    </tr>

    @code {
        [Parameter]
        public ActionItem Action { get; set; }


        [Parameter]
        public string Index { get; set; }

        [Parameter]
        public List<DDOption> Statuses { get; set; }

        [Parameter]
        public List<DDOption> Types { get; set; }

        [Parameter]
        public EventCallback<string> OnClickCallback { get; set; }

        [Parameter]
        public EventCallback<string> OnChangeCallback { get; set; }

        [Parameter]
        public EventCallback<string> OnRowOptionCallback { get; set; }

        string inputClasses = "form-control to-do";
        string imgSource = "images/checkbox-0.png";

        string Checked = "0";
        bool HasNotes = false;

        string message = "Original";

        private void CaptionChanged(int index, string text)
        {
            Action.Title = text;
            StateHasChanged();
        }

        protected override void OnParametersSet()
        {

            HasNotes = (Action.Notes != null && Action.Notes.Count > 0);

            if (Utilities.GetDoneFromStatus(Action))
            {
                inputClasses = "form-control to-do todo-done";
            }
            else
            {
                inputClasses = "form-control to-do";
            }
        }

        private string GetFriendlyStatusName(string key)
        {
            var fs = Statuses.Where(s => s.Key == key).Select(s => s.Value).FirstOrDefault();
            if (fs == null) fs = "";
            return fs;
        }

        private string GetFriendlyTypeName(string key)
        {
            var fs = Types.Where(s => s.Key == key).Select(s => s.Value).FirstOrDefault();
            if (fs == null) fs = "&nbsp;";
            return fs;
        }

        private string GetColorStyleFromStatus(string status)
        {
            string color = "#8ad88a";
            switch (status)
            {
                case "expired":
                case "cancelled":
                case "done":
                    color = "#eee";
                    break;
                default:
                    color = "#8ad88a";
                    break;
            }
            return color;
        }



    }
